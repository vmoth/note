--import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe)
import XMonad.Util.EZConfig(additionalKeys)
import XMonad.Prompt.ConfirmPrompt
--import XMonad.Layout.Gaps
import XMonad.Config.Desktop
import System.IO
import System.Exit
import XMonad.Layout.Tabbed
import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.NoBorders
import XMonad.Layout.Spacing
import XMonad.Hooks.ManageDocks
import XMonad hiding ( (|||) )
import XMonad.Layout.LayoutCombinators
import XMonad.Layout.WindowNavigation
import XMonad.Layout.SubLayouts
import XMonad.Layout.BoringWindows
import XMonad.Layout.TwoPane
import XMonad.Layout.Combo
import XMonad.Actions.WindowGo
import qualified XMonad.StackSet as W
import XMonad.Actions.WindowBringer
-- smartBorders and noBorders

--myTabConfig = def { inactiveBorderColor = "#FF0000"

--                  , activeTextColor = "#00FF00"}
myTabConfig = def { activeColor = "#556064"
                  , inactiveColor = "#2F3D44"
                  , urgentColor = "#FDF6E3"
                  , activeBorderColor = "#454948"
                  , inactiveBorderColor = "#454948"
                  , urgentBorderColor = "#268BD2"
                  , activeTextColor = "#80FFF9"
                  , inactiveTextColor = "#1ABC9C"
                  , fontName = "xft:Source Code Pro:size=8:antialias=true"
                  , urgentTextColor = "#1ABC9C"
                  , decoHeight = 14
                  , decoWidth = 14
                  }
n = 5
gaps = spacingRaw True (Border n n n n) True (Border n n n n) True
---myLayout = gaps [(U,18), (R,5), (L,5),(D,5)] $ Tall 1 (3/100) (1/2) ||| noBorders Full ||| tabbed shrinkText myTabConfig
myLayout =  windowNavigation $ boringWindows $ subLayout [0,1,2] (Tall 1 0.2 0.5 ||| Tall 1 0.2 0.5 ||| Tall 1 0.2 0.5) $ avoidStruts $ Tall 1 (3/100) (1/2) ||| tabbed shrinkText myTabConfig ||| noBorders Full 
--myLayout =  avoidStruts $ Tall 1 (3/100) (1/2) ||| noBorders Full ||| tabbed shrinkText myTabConfig 
---myLayout =  windowNavigation $ subTabbed $ boringWindows $ avoidStruts $ Tall 1 (3/100) (1/2) ||| noBorders Full 
---myLayout = avoidStruts (Tall 1 (3/100) (1/2) ||| noBorders Full ||| tabbed shrinkText myTabConfig)
--myLayout =  spacingRaw True (Border 18 5 5 5) True (Border 18 5 5 5) True $ Tall 1 (3/100) (1/2) ||| noBorders Full ||| simpleTabbed
--myLayout = avoidStruts $ noBorders (tabbed shrinkText myTabConfig) ||| Tall ||| Full
--myLayout = avoidStruts $ noBorders (tabbed shrinkText myTabConfig) ||| Tall

main = do
    xmproc <- spawnPipe "xmobar"

    xmonad $ docks $ desktopConfig
        { 
	  manageHook = manageDocks <+> manageHook desktopConfig
	, layoutHook = myLayout
        , logHook = dynamicLogWithPP xmobarPP
                        { ppOutput = hPutStrLn xmproc
                        , ppTitle = xmobarColor "green" "" . shorten 50
                        }
        , modMask = mod4Mask     -- Rebind Mod to the Windows key
	, borderWidth = 3
	, workspaces = ["A","2","3","4","5","6","7","8","9"]
        } `additionalKeys`
        [ 
	  ((mod4Mask .|. shiftMask, xK_l), spawn "xscreensaver-command -lock; xset dpms force off")
        , ((controlMask, xK_Print), spawn "sleep 0.2; scrot -s")
	, ((mod4Mask .|. shiftMask, xK_z     ), io (exitWith ExitSuccess))
	, ((mod4Mask .|. shiftMask, xK_b     ), spawn "exec google-chrome-stable --proxy-server='192.168.12.11:7890'")
	, ((mod4Mask .|. shiftMask, xK_Return     ), spawn "exec mate-terminal")
	, ((mod4Mask , xK_d     ), spawn "exec rofi -show drun")
	, ((mod4Mask .|. shiftMask, xK_d     ), spawn "exec rofi -show window")
	, ((mod4Mask .|. shiftMask, xK_v), sendMessage $ JumpToLayout "Tall")
	, ((mod4Mask .|. shiftMask, xK_f), sendMessage $ JumpToLayout "Full")
        , ((mod4Mask .|. shiftMask, xK_t), sendMessage $ JumpToLayout "Tabbed Simplest")
	, ((mod4Mask, xK_b     ), sendMessage ToggleStruts)
        , ((0, xK_Print), spawn "scrot")

        , ((mod4Mask .|. controlMask, xK_h), sendMessage $ pullGroup L)
        , ((mod4Mask .|. controlMask, xK_l), sendMessage $ pullGroup R)
        , ((mod4Mask .|. controlMask, xK_k), sendMessage $ pullGroup U)
        , ((mod4Mask .|. controlMask, xK_j), sendMessage $ pullGroup D)

        , ((mod4Mask .|. controlMask, xK_m), withFocused (sendMessage . MergeAll))
        , ((mod4Mask .|. controlMask, xK_u), withFocused (sendMessage . UnMerge))

        , ((mod4Mask .|. controlMask, xK_period), onGroup W.focusUp')
        , ((mod4Mask .|. controlMask, xK_comma), onGroup W.focusDown')
	, ((mod4Mask .|. controlMask, xK_g     ), gotoMenu)
	, ((mod4Mask .|. controlMask, xK_b     ), bringMenu)

        ]
